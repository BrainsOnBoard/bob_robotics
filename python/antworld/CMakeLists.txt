cmake_minimum_required(VERSION 3.10)
include(../../cmake/BoBRobotics.cmake)
project(python_antworld)

add_definitions(-DBOB_SHARED_LIB)
if(NOT MSVC)
    string(APPEND CMAKE_CXX_FLAGS " -fPIC")
endif()

find_package(BoBRobotics QUIET REQUIRED COMPONENTS antworld)

# NB: These are extra modules only available to scikit-build
find_package(PythonExtensions REQUIRED)
find_package(NumPy REQUIRED)  # Not to be confused with our own FindNumpy.cmake!
include_directories(${NumPy_INCLUDE_DIRS})

add_library(_antworld MODULE src/antworld.cc)
python_extension_module(_antworld)
install(TARGETS _antworld LIBRARY DESTINATION bob_robotics/antworld)
target_link_libraries(_antworld ${BoBRobotics_LIBRARIES})

# On Linux I found I was getting errors like this: free(): invalid pointer
# I suspect this is to do with free() and malloc() from libc taking
# precedence over those in libstdc++ and breaking things. Linking against it
# explicitly seems to fix things.
if(NOT MSVC)
    target_link_libraries(_antworld stdc++)
endif()

# Some of the python structs have a load of fields that we don't use, so let's
# just auto-initialise them to zeros.
include(CheckCXXCompilerFlag)
foreach(FLAG -Wno-missing-field-initializers)
    check_cxx_compiler_flag(${FLAG} COMPILER_SUPPORTS_${FLAG})
    if(COMPILER_SUPPORTS_${FLAG})
        target_compile_options(_antworld PRIVATE ${FLAG})
    endif()
endforeach()

# Version string generated by build process from git commit
if(DEFINED SKBUILD)
    target_compile_definitions(_antworld PRIVATE BOB_VERSION=\"${BOB_VERSION}\")
endif()

install(SCRIPT copy_shared_libs.cmake)
